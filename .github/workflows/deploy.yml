name: deploy
on:
  workflow_run:
    workflows:
      - check
    types:
      - completed
    branches:
      - master
env:
  PROJECT_NAME: 2p-kt
  WORKFLOW: deploy
jobs:
  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    timeout-minutes: 120
    concurrency:
      # Only one release job at a time. Strictly sequential.
      group: release-github
    steps:
      - name: Cache Build
        uses: actions/cache@v3.2.3
        with:
          path: |
            build
            **/build
          key: ${{ runner.os }}-gradle-build-${{ github.workflow }}-${{ github.event.number || github.ref }}

      - name: Checkout
        uses: danysk/action-checkout@0.2.5

      - name: Generate Jars
        uses: DanySK/build-check-deploy-gradle-action@2.1.21
        with:
          build-command: ./gradlew shadowJar
          check-command: ./gradlew dokkaHtmlMultiModuleZip

      - name: Get Version
        id: get-version
        run: echo ::set-output name=version::$(./gradlew --console=plain -q printVersion)

      - name: Release Assets
        id: upload-release-assets
        run: |
          set -x
          ASSETS=()
          for A in **/build/**/*redist*.jar **/build/**/2p*full.jar build/**/*javadoc*.zip; do
            ASSETS+=("-a" "$A")
            echo "Releasing $A"
          done
          hub release create "${ASSETS[@]}" -m "$RELEASE_TAG" "$RELEASE_TAG"
        env:
          RELEASE_TAG: ${{ steps.get-version.outputs.version }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  deploy-on-central:
    needs: github-release
    runs-on: ubuntu-latest
    name: Deploy on Central
    if: github.event.workflow_run.conclusion == 'success'
    # && github.event.ref_type == 'tag'
    timeout-minutes: 120
    concurrency:
      # Only one release job at a time. Strictly sequential.
      group: release-central
    steps:
      - name: Cache Build
        uses: actions/cache@v3.2.3
        with:
          path: |
            build
            **/build
          key: ${{ runner.os }}-gradle-build-${{ github.workflow }}-${{ github.event.number || github.ref }}

      - name: Checkout
        uses: danysk/action-checkout@0.2.5

      - name: Deploy
        uses: DanySK/build-check-deploy-gradle-action@2.1.21
        with:
          build-command: ./gradlew dokkaHtml
          check-command: ./gradlew dokkaHtmlMultiModuleZip
          deploy-command: ./gradlew publishAllPublicationsToMavenRepository
          should-deploy: true
          maven-central-username: ${{ secrets.OSSRH_USERNAME }}
          maven-central-password: ${{ secrets.OSSRH_PASSWORD }}
          signing-key: ${{ secrets.SIGNING_KEY }}
          signing-password: ${{ secrets.SIGNING_PASSWORD }}

  publish-aur-update:
    needs: github-release
    runs-on: ubuntu-latest
    name: Update AUR
    if: github.event.workflow_run.conclusion == 'success'
    env:
      AUR_PRIVATE_KEY: ${{ secrets.AUR_PRIVATE_KEY }}
      SSHPASS: ${{ secrets.AUR_PASSPHRASE }}
    timeout-minutes: 30
    concurrency:
      # Only one release job at a time. Strictly sequential.
      group: release-aur
    steps:
      - name: Configure SSH
        run: |
          mkdir -p $HOME/.ssh
          echo $AUR_PRIVATE_KEY | base64 --decode > $HOME/.ssh/aur
          chmod go-rwx $HOME/.ssh/aur

      - name: Configure Git
        run: |
          git config --global user.name '${{ secrets.AUR_MAINTAINER_NAME }}'
          git config --global user.email '${{ secrets.AUR_MAINTAINER_EMAIL }}'

      - name: Clone AUR repo
        run: |
          eval `ssh-agent`
          sshpass -P passphrase -e ssh-add $HOME/.ssh/aur
          git clone --depth 1 '${{ secrets.AUR_REPO }}' aur

      - name: Regenerate PKGBUILD
        working-directory: ./aur
        run: ./generate.sh ${{ needs.github-release.outputs.version }} > PKGBUILD

      - name: Regenerate .SRCINFO
        id: makepkg
        uses: smallstep/pkgbuild-action@v1.1.5
        with:
          pkgdir: ./aur

      - name: Commit & Push
        working-directory: ./aur
        run: |
          git add .
          git commit -m "release $PROJECT_NAME v${{ needs.github-release.outputs.version }}"
          eval `ssh-agent`
          sshpass -P passphrase -e ssh-add $HOME/.ssh/aur
          git push
