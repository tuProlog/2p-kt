name: deploy
on:
  workflow_run:
    workflows:
      - check
    types:
      - completed
    branches:
      - master
env:
  PROJECT_NAME: 2p-kt
  WORKFLOW: deploy
  GRADLE_OPTIONS: "--console=plain --stacktrace"
jobs:
  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # all history

      - name: Get All Tags
        run: git fetch --tags -f

      - name: Generate Jars
        run: gradle ${{ env.gradle-options }} shadowJar --parallel

      - name: Generate Documentation
        run: gradle ${{ env.gradle-options }} dokkaHtmlMultiModuleZip --parallel

      - name: Get Version
        id: get-version
        run: echo ::set-output name=version::$(gradle --console=plain -q printVersion)

      - name: Release Assets
        id: upload-release-assets
        run: |
          set -x
          ASSETS=()
          for A in **/build/**/*redist*.jar build/**/*javadoc*.zip; do
            ASSETS+=("-a" "$A")
            echo "Releasing $A"
          done
          RELEASE_TAG='${{ steps.get-version.outputs.version }}'
          hub release create "${ASSETS[@]}" -m "$RELEASE_TAG" "$RELEASE_TAG"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-on-central:
    runs-on: ubuntu-latest
    name: Deploy on Central
    if: github.event.workflow_run.conclusion == 'success'
    # && github.event.ref_type == 'tag'
    env:
      ORG_GRADLE_PROJECT_signingKey: ${{ secrets.SIGNING_KEY }}
      ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.SIGNING_PASSWORD }}
      # ORG_GRADLE_PROJECT_mavenRepo: ${{ secrets.MAVEN_REPO }}
      ORG_GRADLE_PROJECT_mavenUsername: ${{ secrets.OSSRH_USERNAME }}
      ORG_GRADLE_PROJECT_mavenPassword: ${{ secrets.OSSRH_PASSWORD }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Get All Tags
        run: git fetch --tags -f

      - name: Generate Documentation
        run: gradle ${{ env.GRADLE_OPTIONS }} dokkaHtml

#      - name: Sign All Artifacts
#        run: gradle ${{ env.GRADLE_OPTIONS }} signAllPublications

      - name: Publish All Artifacts on Central
        run: gradle ${{ env.GRADLE_OPTIONS }} publishAllPublicationsToMavenRepository

  publish-aur-update:
    needs: github-release
    runs-on: ubuntu-latest
    name: Update AUR
    if: github.event.workflow_run.conclusion == 'success'
    env:
      AUR_PRIVATE_KEY: ${{ secrets.AUR_PRIVATE_KEY }}
      SSHPASS: ${{ secrets.AUR_PASSPHRASE }}
    steps:
      - name: Configure SSH
        run: |
          mkdir -p $HOME/.ssh
          echo $AUR_PRIVATE_KEY | base64 --decode > $HOME/.ssh/aur
          chmod go-rwx $HOME/.ssh/aur
          eval `ssh-agent`
          sshpass -P passphrase -e ssh-add $HOME/.ssh/aur

      - name: Configure Git
        run: |
          git config --global user.name '${{ secrets.AUR_MAINTAINER_NAME }}'
          git config --global user.email '${{ secrets.AUR_MAINTAINER_EMAIL }}'

      - name: Clone AUR repo
        run: git clone --depth '${{ secrets.AUR_REPO }}' aur

      - name: Regenerate PKGBUILD
        working-directory: ./aur
        run: ./generate.sh ${{ needs.github-release.outputs.version }} > PKGBUILD

      - name: Regenerate .SRCINFO
        id: makepkg
        uses: smallstep/pkgbuild-action@v1.1.5
        with:
          pkgdir: ./aur

      - name: Commit & Push
        working-directory: ./aur
        run: |
          git add .
          git commit -m "release $PROJECT_NAME v${{ needs.github-release.outputs.version }}"
          git push
